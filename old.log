---- debug_test stdout ----
class Base {
  foo() {
    print "Base.foo()";
  }
}

class Derived < Base {
  foo() {
    print "Derived.foo()";
    super.foo();
  }
}

Derived().foo();
// expect: Derived.foo()
// expect: Base.foo()

Chunk:  0000    1 OP_CLASS Base at line 1

Stack:
Locals:
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] 
Chunk:  0001    | OP_DEFINE_GLOBAL Base at line 1

Stack:[Base] 
Locals:[Base] 
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] 
Chunk:  0002    | OP_GET_GLOBAL Base at line 1

Stack:
Locals:
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk:  0003    | OP_CLOSURE <fn foo> at line 1

Stack:[Base] 
Locals:[Base] 
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk:  0004    2 OP_METHOD foo at line 2

Stack:[Base] [fun foo (0 args)] 
Locals:[Base] [fun foo (0 args)] 
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk:  0005    | OP_POP at line 2

Stack:[Base] 
Locals:[Base] 
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk:  0006    | OP_CLOSURE <fn class@Derived> at line 2

Stack:
Locals:
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk:  0007    | OP_NIL at line 2

Stack:[fun class@Derived (0 args)] 
Locals:[fun class@Derived (0 args)] 
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk:  0008    | OP_CALL 0 at line 2

Stack:[fun class@Derived (0 args)] [nil] 
Locals:[fun class@Derived (0 args)] [nil] 
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk: class@Derived 0000    7 OP_CLASS Derived at line 7

Stack:[fun class@Derived (0 args)] [nil] 
Locals:[nil] 
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk: class@Derived 0001    | OP_DEFINE_GLOBAL Derived at line 7

Stack:[fun class@Derived (0 args)] [nil] [Derived] 
Locals:[nil] [Derived] 
Upvalues:
Globals:clock=[fun native@clock (0 args)] assert=[fun native@assert (2 args)] Base=[Base] 
Chunk: class@Derived 0002    | OP_GET_GLOBAL Base at line 7

Stack:[fun class@Derived (0 args)] [nil] 
Locals:[nil] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: class@Derived 0003    | OP_GET_GLOBAL Derived at line 7

Stack:[fun class@Derived (0 args)] [nil] [Base] 
Locals:[nil] [Base] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: class@Derived 0004    | OP_INHERIT at line 7

Stack:[fun class@Derived (0 args)] [nil] [Base] [Derived] 
Locals:[nil] [Base] [Derived] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: class@Derived 0005    | OP_GET_GLOBAL Derived at line 7

Stack:[fun class@Derived (0 args)] [nil] [Base] 
Locals:[nil] [Base] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: class@Derived 0006    | OP_CLOSURE <fn foo> at line 7
          |            local 1

Stack:[fun class@Derived (0 args)] [nil] [Base] [Derived] 
Locals:[nil] [Base] [Derived] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: class@Derived 0007    8 OP_METHOD foo at line 8

Stack:[fun class@Derived (0 args)] [nil] [Base] [Derived] [fun foo (0 args)] 
Locals:[nil] [Base] [Derived] [fun foo (0 args)] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: class@Derived 0008    | OP_POP at line 8

Stack:[fun class@Derived (0 args)] [nil] [Base] [Derived] 
Locals:[nil] [Base] [Derived] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk:  0009    | OP_GET_GLOBAL Derived at line 2

Stack:[fun class@Derived (0 args)] 
Locals:[fun class@Derived (0 args)] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk:  0010   14 OP_NIL at line 14

Stack:[fun class@Derived (0 args)] [Derived] 
Locals:[fun class@Derived (0 args)] [Derived] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk:  0011    | OP_CALL 0 at line 14

Stack:[fun class@Derived (0 args)] [Derived] [nil] 
Locals:[fun class@Derived (0 args)] [Derived] [nil] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk:  0012    | OP_INVOKE foo 0 at line 14

Stack:[fun class@Derived (0 args)] [Derived instance] 
Locals:[fun class@Derived (0 args)] [Derived instance] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0000    9 OP_CONSTANT Derived.foo() at line 9

Stack:[fun class@Derived (0 args)] [Derived instance] 
Locals:[Derived instance] 
Upvalues:[closed upvalue [Base]] 
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0001    | OP_PRINT at line 9

Stack:[fun class@Derived (0 args)] [Derived instance] [Derived.foo()] 
Locals:[Derived instance] [Derived.foo()] 
Upvalues:[closed upvalue [Base]] 
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0002    | OP_GET_LOCAL 0 at line 9

Stack:[fun class@Derived (0 args)] [Derived instance] 
Locals:[Derived instance] 
Upvalues:[closed upvalue [Base]] 
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0003   10 OP_GET_UPVALUE 0 at line 10

Stack:[fun class@Derived (0 args)] [Derived instance] [Derived instance] 
Locals:[Derived instance] [Derived instance] 
Upvalues:[closed upvalue [Base]] 
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0004    | OP_INVOKE_SUPER foo 0 at line 10

Stack:[fun class@Derived (0 args)] [Derived instance] [Derived instance] [Base] 
Locals:[Derived instance] [Derived instance] [Base] 
Upvalues:[closed upvalue [Base]] 
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0000    3 OP_CONSTANT Base.foo() at line 3

Stack:[fun class@Derived (0 args)] [Derived instance] [Derived instance] 
Locals:[Derived instance] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0001    | OP_PRINT at line 3

Stack:[fun class@Derived (0 args)] [Derived instance] [Derived instance] [Base.foo()] 
Locals:[Derived instance] [Base.foo()] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0002    | OP_NIL at line 3

Stack:[fun class@Derived (0 args)] [Derived instance] [Derived instance] 
Locals:[Derived instance] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0003    | OP_RETURN at line 3

Stack:[fun class@Derived (0 args)] [Derived instance] [Derived instance] [nil] 
Locals:[Derived instance] [nil] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0005    | OP_POP at line 10

Stack:[fun class@Derived (0 args)] [Derived instance] [nil] 
Locals:[Derived instance] [nil] 
Upvalues:[closed upvalue [Base]] 
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0006    | OP_NIL at line 10

Stack:[fun class@Derived (0 args)] [Derived instance] 
Locals:[Derived instance] 
Upvalues:[closed upvalue [Base]] 
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk: foo 0007    | OP_RETURN at line 10

Stack:[fun class@Derived (0 args)] [Derived instance] [nil] 
Locals:[Derived instance] [nil] 
Upvalues:[closed upvalue [Base]] 
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived] 
Chunk:  0013    | OP_POP at line 14

Stack:[fun class@Derived (0 args)] [nil] 
Locals:[fun class@Derived (0 args)] [nil] 
Upvalues:
Globals:Base=[Base] assert=[fun native@assert (2 args)] clock=[fun native@clock (0 args)] Derived=[Derived]